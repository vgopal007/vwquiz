To unit test your Vue.js component, you can use tools like Vue Test Utils along with a testing framework like Jest or Mocha. Below, I'll provide an example of how to set up and write unit tests for the JavaScript file you provided.

1. Setup
First, ensure you have the necessary libraries installed. If you haven't set up a testing environment yet, you can install Vue Test Utils and Jest (or another testing framework):

bash
Copy code
npm install --save-dev @vue/test-utils jest
2. Create the Test File
Create a test file, e.g., App.spec.js, in a tests directory:

bash
Copy code
mkdir tests
touch tests/App.spec.js
3. Write Tests
Here's an example of how you might write tests for your Vue component:

javascript
Copy code
// tests/App.spec.js

import { mount } from '@vue/test-utils';
import App from '../path/to/your/component'; // Adjust the path as needed

describe('Quiz App', () => {
  let wrapper;

  beforeEach(() => {
    wrapper = mount(App, {
      propsData: {
        subject: 'Math' // or any subject you need
      }
    });
  });

  test('renders correctly', () => {
    expect(wrapper.exists()).toBe(true);
    expect(wrapper.vm.subject).toBe('Math');
  });

  test('fetches questions on created', async () => {
    // Mock fetch
    global.fetch = jest.fn(() =>
      Promise.resolve({
        json: () => Promise.resolve({ data: [{ uid: 1, answer: [{ answer: 'Option A', is_correct: true }] }] } }),
      })
    );

    await wrapper.vm.getQuestions();

    expect(global.fetch).toHaveBeenCalledWith('/api/get-quiz/?subject=Math');
    expect(wrapper.vm.questions).toEqual([{ uid: 1, answer: [{ answer: 'Option A', is_correct: true }] }]);
  });

  test('selects an answer', () => {
    const questionUid = 1;
    const event = { target: { value: 'Option A' } };
    wrapper.vm.selectAnswer(event, questionUid);
    expect(wrapper.vm.selectedAnswers[questionUid]).toBe('Option A');
  });

  test('checks correct answer', () => {
    // Setup the question
    wrapper.setData({
      questions: [{ uid: 1, answer: [{ answer: 'Option A', is_correct: true }] }]
    });
    wrapper.vm.selectedAnswers[1] = 'Option A';
    wrapper.vm.checkAnswer(1);
    
    expect(wrapper.vm.correctAnswers).toBe(1);
    expect(wrapper.vm.incorrectAnswers).toBe(0);
  });

  test('navigates to next question', () => {
    wrapper.setData({ questions: [{ uid: 1 }, { uid: 2 }] });
    wrapper.vm.currentQuestionIndex = 0;
    wrapper.vm.nextQuestion();
    
    expect(wrapper.vm.currentQuestionIndex).toBe(1);
  });

  test('marks a question for review', () => {
    wrapper.vm.markForReview();
    
    expect(wrapper.vm.markedQuestions).toContain(0);
  });

  test('ends the quiz and calculates results', () => {
    wrapper.setData({ questions: [{ uid: 1 }, { uid: 2 }] });
    wrapper.vm.correctAnswers = 1; // Simulate answering questions
    wrapper.vm.incorrectAnswers = 0;
    wrapper.vm.endQuiz();

    expect(wrapper.vm.results.correctAnswers).toBe(1);
    expect(wrapper.vm.results.incorrectAnswers).toBe(0);
    expect(wrapper.vm.results.totalQuestions).toBe(2);
    expect(wrapper.vm.quizEnded).toBe(true);
  });
});
4. Run the Tests
You can run your tests using Jest by adding a script in your package.json:

json
Copy code
"scripts": {
  "test": "jest"
}
Then run:

bash
Copy code
npm run test
Key Points
Mocking Fetch Requests: In your tests, you can mock the fetch method to simulate API calls. This allows you to control the responses and test how your component behaves based on different scenarios.
State Management: Ensure you properly manipulate and check the component's state to verify functionality.
Assertions: Use Jest's expect method to make assertions about your component's behavior.
Conclusion
This should give you a solid foundation for testing your Vue component. You can expand upon these tests as needed, covering edge cases and additional functionality. If you have specific features you'd like to test or run into issues, feel free to ask!